/*
void test_db() {
    CDBConnection db("localhost", "logger", "root", "dbpassword");

    QueryResult a = db.get_record("show tables");
    QueryResultList b = db.get_record_list("select * from Logger");


    std::cout << std::endl;
    for (auto it = a.begin(); it != a.end(); it++)
        std::cout << (*it) << " ";

    std::cout << std::endl;

    for (auto it = b.begin(); it != b.end(); it++) {
        for (auto col = (*it).begin(); col != (*it).end(); col++)
            std::cout << (*col) << " ";
        std::cout << std::endl;
    }
}
*/

/*
namespace mpl
{
#define make_ns_type(ns, tname) template <ns::tname val> struct tname { enum : ns::tname { value = val }; };
    make_ns_type(std, int8_t)   make_ns_type(std, uint8_t)   make_ns_type(std, int16_t)  make_ns_type(std, uint16_t)
    make_ns_type(std, int32_t)  make_ns_type(std, uint32_t)  make_ns_type(std, int64_t)  make_ns_type(std, uint64_t)

    template<class first, class second>
    struct pair {};

    struct nothing { nothing() = delete; enum { value = 0 }; };

    template<class... tail>
    struct map { };

    template<class first, class second, class... tail>
    struct map<mpl::pair<first, second>, tail...> : map<tail...> { };

    template <class... empty>
    struct at { using type = nothing; };

    template< class first, class second, class... tail, class key>
    struct at<mpl::map<mpl::pair<first, second>, tail...>, key>
    {
        using type = typename std::conditional< std::is_same<first, key>::value, // if pair_key == key
                second,                          // true: found, break recursion
                typename mpl::at<mpl::map<tail...>, key>::type // false: go to the next pair
        >::type;
    };

};

class A
{

};

#pragma pack(1)
*/

    /*
    std::vector<std::reference_wrapper<int>> h;

    int a =3;
    int b = 5;

    h.emplace_back(std::ref(a));
    h.emplace_back(std::ref(b));

    h[1] += 5;

    std::unique_ptr<int> qwe = std::make_unique<int>(5);
    std::unique_ptr<int> qwe2;
    qwe2 = std::move(qwe);

    struct S
    {
        char h;
        int a;
        float b;
        double c;
    };




    unsigned char c = 0xFF;
    S* y = (S*)malloc(sizeof(S) + 8);
    for(auto i = 0 ; i < sizeof(S) + 8; ++i)
        (*(((unsigned char*)y) + i)) = 0xff;

    y->a = 0;
    y->b = 0;
    y->c = 0;
    y->h = 0;

    // 0 1 2 3 4

    auto size = sizeof(S);

    typedef mpl::map<
            mpl::pair<mpl::int16_t<1>, float>,
            mpl::pair<mpl::int16_t<2>, double>,
            mpl::pair<mpl::int16_t<3>, A>> theMap;

    mpl::at<theMap, mpl::int16_t<1>>::type g;
    //auto h = typeid(g).name();
    */

// ====================================================================================================================
// COMMAND FUNCTIONS PROTOTYPES
// std::string help(const std::string arg);  // cmd: help
// std::string test(const std::string arg);  // cmd: test
// std::string store(const std::string& arg); // cmd: store <args>
// std::string get_all(const std::string arg); // cmd: getall
// std::string get_read(const std::string arg); // cmd: get_read
// std::string get_unread(const std::string arg); // cmd: get_unread
// std::string set_read_all(const std::string arg); // cmd: set_read_all
// std::string clear_db(const std::string arg); // cmd: clear_db
// ====================================================================================================================
// COMMAND LIST
// std::vector<std::shared_ptr<CCommand>> COMMAND_LIST = {
//        std::shared_ptr<CCommand>(new CCommand("help", &help, true)),
//        std::make_shared<CCommand>("test", &test, true),
//        //std::shared_ptr<CCommand>(new CCommand("test", &test, true)),
//        std::shared_ptr<CCommand>(new CCommand("store", &store, true)),
//        std::shared_ptr<CCommand>(new CCommand("get_all", &get_all, false)),
//        std::shared_ptr<CCommand>(new CCommand("get_read", &get_read, false)),
//        std::shared_ptr<CCommand>(new CCommand("get_unread", &get_unread, false)),
//        std::shared_ptr<CCommand>(new CCommand("set_read_all", &set_read_all, false)),
//        std::shared_ptr<CCommand>(new CCommand("clear_db", &clear_db, false)),
// };
// ====================================================================================================================
// SCHEDULER
/*
 * Возвращает результат исполнения команды если такой имеется.
 * Если результата нет, то return nullptr
 * Ошибки:
 * 1) -1    - серьезная ошибка на стороне сервера
 * 2) 0     - строка команды введена неверно
 * 3) 1     - команда не найдена
 */
/*
std::string command_scheduler(const std::string command) {
    static std::regex re("(\\w+)\\s*(.*)?\\s*");
    std::smatch result;
    std::string error;

    try {
        if (std::regex_search(command, result, re)) {
            std::string cmd(result.str(1));
            std::string args(result.str(2));

            for (auto it = COMMAND_LIST.begin(); it != COMMAND_LIST.end(); it++) {
                if (cmd.compare((*it)->signature) == 0) {
                    std::cout << "[SERVER] Command execute: "+ cmd << std::endl;
                    return (*it)->call(args);
                }
            }

            error = "Unknown command: "+ command;
            std::cout << "[SERVER] " << error << std::endl;
            return error;
        } else {
            error = "[SERVER] Command string is incorrect: "+ command;
            std::cout << error << std::endl;
            return error;
        }
    }
    catch(std::exception& ex) {
        error = "[ERROR] Command Scheduler failed: ";
        error += ex.what();
        std::cout << error << std::endl;
        return error;
    }
    catch(...) {
        error = "[ERROR] Command Scheduler have fatal error.";
        std::cout << error << std::endl;
        return error;
    }
}
*/