/* =====================================================================================================================
 * File: functions.h
 * Description: Реализации функций обработки команд
 * Created: 14.02.2017
 * Author: soltanoff
 * ================================================================================================================== */
#ifndef SERVER_FUNCTIONS_H
#define SERVER_FUNCTIONS_H
/* ================================================================================================================== */
#include "../database/database.h"
#include "../../config/config.h"
#include <memory>
/* ================================================================================================================== */
#define RR_MSG_FLAG "!rr"
#define GET_MSG_FLAG "!get"
#define SEND_MSG_FLAG "!send: "
/*!
 * @class Functions
 * Класс описывающий основные реализации обработчиков команд
 */
class Functions
{
public:
    // ====================================================================================================================
    //! @typedef вектор обработанных данных
    typedef std::vector<std::uint8_t> DataVector;
    // typedef std::function<void(DataVector)> FuncArg;
    //! @typedef тип полиморфной оболочки функции
    typedef std::function<void(DataVector, SOCKET)> FuncArg;
    // ====================================================================================================================
    /*!
     * @public Метод реализующий обработку `неизвестной` команды
     * @param arg - вектор аргументов команды
     * @param result_cb - функция осуществляющая пост-обработку (отправку данных, например)
     * @param s - сокет объекта назначения
     * @return None
     * @note реализует обработку команды заглушки, при неопределенной команды
     * @brief (!) НЕ принимает аргументов
     * @brief обработчик команды: -
     */
    void unknown(DataVector arg, FuncArg result_cb, SOCKET s);
    /*!
     * @public Метод реализующий обработку команды перезагрузки GSM-устройства
     * @param arg - вектор аргументов команды
     * @param result_cb - функция осуществляющая пост-обработку (отправку данных, например)
     * @param s - сокет объекта назначения
     * @return None
     * @note реализует обработку команды перезагрузки путем отправки управляющих сигналов на устройство по сети
     * @brief (!) НЕ принимает аргументов
     * @brief обработчик команды: rr
     */
    void rr(DataVector arg, FuncArg result_cb, SOCKET s);
    /*!
     * @public Метод реализующий обработку команды запроса буффера GSM-устройства
     * @param arg - вектор аргументов команды
     * @param result_cb - функция осуществляющая пост-обработку (отправку данных, например)
     * @param s - сокет объекта назначения
     * @return None
     * @note реализует обработку команды незамедлительного получения буффера USB-трафика GSM-устройства
     * @brief (!) НЕ принимает аргументов
     * @brief обработчик команды: get_buf
     */
    void get_buf(DataVector arg, FuncArg result_cb, SOCKET s);
    /*!
     * @public Метод реализующий обработку команды отправки управляющих воздействий на GSM-устройства
     * @param arg - вектор аргументов команды
     * @param result_cb - функция осуществляющая пост-обработку (отправку данных, например)
     * @param s - сокет объекта назначения
     * @return None
     * @note осуществляет отправку управляющих команд, указанными пользователем, на GSM-устройства
     * @brief (!) НЕОБХОДИМЫ аргументы
     * @brief обработчик команды: send_command <args>
     */
    void send_command(DataVector arg, FuncArg result_cb, SOCKET s);
    // cmd: check_device
    /*!
     * @public Метод реализующий обработку команды просмотры наличия подключенных GSM-устройств
     * @param arg - вектор аргументов команды
     * @param result_cb - функция осуществляющая пост-обработку (отправку данных, например)
     * @param s - сокет объекта назначения
     * @return None
     * @note осуществляет проверку наличия подключенных GSM-устройств к серверу.
     * @note В качестве ответа отправляется модель GSM-модуля
     * @brief (!) НЕ принимает аргументов
     * @brief обработчик команды: check_device
     */
    void check_device(DataVector arg, FuncArg result_cb, SOCKET s);
    /*!
     * @public Метод реализующий обработку команды запроса справки команд сервера
     * @param arg - вектор аргументов команды
     * @param result_cb - функция осуществляющая пост-обработку (отправку данных, например)
     * @param s - сокет объекта назначения
     * @return None
     * @note возвращает список доступных команд с их описанием
     * @brief (!) НЕ принимает аргументов
     * @brief обработчик команды: help
     */
    void help(DataVector arg, FuncArg result_cb, SOCKET s);
    /*!
     * @public Тестовый метод
     * @param arg - вектор аргументов команды
     * @param result_cb - функция осуществляющая пост-обработку (отправку данных, например)
     * @param s - сокет объекта назначения
     * @return None
     * @note отправляет всем клиентам сервера тестовое сообщение
     * @brief (!) НЕ принимает аргументов
     * @brief обработчик команды: test
     */
    void test(DataVector arg, FuncArg result_cb, SOCKET s);
    // cmd: store <args>
    /*!
     * @public Метод реализующий обработку команды хранения данных
     * @param arg - вектор аргументов команды
     * @param result_cb - функция осуществляющая пост-обработку (отправку данных, например)
     * @param s - сокет объекта назначения
     * @return None
     * @note осуществляет хранения данных на БД сервера
     * @brief (!) НЕОБХОДИМЫ аргументы
     * @brief обработчик команды: store <args>
     */
    void store(DataVector arg, FuncArg result_cb, SOCKET s);
    /*!
     * @public Метод реализующий обработку команды запроса всех хранящихся данных
     * @param arg - вектор аргументов команды
     * @param result_cb - функция осуществляющая пост-обработку (отправку данных, например)
     * @param s - сокет объекта назначения
     * @return None
     * @note возвращает список всех данных в БД сервера (помеченные как удаленные и прочитанные, так и нет)
     * @brief (!) НЕ принимает аргументов
     * @brief обработчик команды: get_all
     */
    void get_all(DataVector arg, FuncArg result_cb, SOCKET s);
    /*!
     * @public Метод реализующий обработку команды запроса всех прочитанных хранящихся данных
     * @param arg - вектор аргументов команды
     * @param result_cb - функция осуществляющая пост-обработку (отправку данных, например)
     * @param s - сокет объекта назначения
     * @return None
     * @note возвращает список всех прочитанных данных в БД сервера
     * @brief (!) НЕ принимает аргументов
     * @brief обработчик команды: get_read
     */
    void get_read(DataVector arg, FuncArg result_cb, SOCKET s);
    /*!
     * @public Метод реализующий обработку команды запроса всех непрочитанных хранящихся данных
     * @param arg - вектор аргументов команды
     * @param result_cb - функция осуществляющая пост-обработку (отправку данных, например)
     * @param s - сокет объекта назначения
     * @return None
     * @note возвращает список всех непрочитанных данных в БД сервера
     * @brief (!) НЕ принимает аргументов
     * @brief обработчик команды: get_unread
     */
    void get_unread(DataVector arg, FuncArg result_cb, SOCKET s);
    /*!
     * @public Метод реализующий обработку команды установки всех хранящихся данных как прочитанные
     * @param arg - вектор аргументов команды
     * @param result_cb - функция осуществляющая пост-обработку (отправку данных, например)
     * @param s - сокет объекта назначения
     * @return None
     * @note помечает все хранящиеся данные USB-трафика в БД сервера как прочитанные
     * @brief (!) НЕ принимает аргументов
     * @brief обработчик команды: set_read_all
     */
    void set_read_all(DataVector arg, FuncArg result_cb, SOCKET s);
    /*!
     * @public Метод реализующий обработку команды установки всех хранящихся данных как удаленные
     * @param arg - вектор аргументов команды
     * @param result_cb - функция осуществляющая пост-обработку (отправку данных, например)
     * @param s - сокет объекта назначения
     * @return None
     * @note помечает все хранящиеся данные USB-трафика в БД сервера как удаленные
     * @brief (!) НЕ принимает аргументов
     * @brief обработчик команды: clear_db
     */
    void clear_db(DataVector arg, FuncArg result_cb, SOCKET s);
private:
    // ====================================================================================================================
    // SERVICE FUNCTIONS
    // function: get database connection
    /*!
     * @public @static Метод возращающий объект подключения к БД
     * @return CDBConnection - объект подключения к БД сервера
     */
    static std::unique_ptr<CDBConnection> get_db();
};
#endif //SERVER_FUNCTIONS_H
