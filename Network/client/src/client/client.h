/* =====================================================================================================================
 * File: client.h
 * Description: Реализация работы пользователя с сервером
 * Created: 01.02.2016
 * Author: soltanoff
 * ================================================================================================================== */
#ifndef CLIENT_H
#define CLIENT_H
/* ================================================================================================================== */
#include "../core/interaction.h"
#include "../core/connection.h"
/* ================================================================================================================== */
/*!
 * @class CClient
 * @inherit IBaseInteraction
 * @inherit IBaseConnection
 * Класс подключаемого клиента к серверу.
 */
class CClient: public IBaseInteraction, public IBaseConnection {
public:
    CClient();
    ~CClient();
    /*!
     * @public Метод осуществляющий инициализацию сокета и дальнейшего подключения к серверу по введенному адресу.
     * @return 0 если открыть сокет получилось, иначе -1
     * @note Содержит в себе логику подключения к серверу по указанному адресу
     */
    int try_open_socket();
    /*!
     * @public Основной циклический метод класса.
     * @return 0 если работа завершилась без аварий, иначе -1
     * @note основной метод для взаимодействия с сервером
     */
    int exec();
    /*!
     * @public Метод позволяющий начать работу клиентской части.
     * @return None
     * @note запуск методов CClient::try_open_socket(), CClient::exec()
     */
    void start();
    /*!
     * @public Метод закрывающий сокет клиента.
     * @return None
     * @note закрытие сокета с параметром SHUT_WR
     */
    void close();
private:
    //! @private флаг указывающий был ли указан ip-адрес сервера
    bool have_ip;
    /*!
     * @private Метод осуществляющий обработку введенных команд пользователя
     * @return None
     * @note осуществляет отправку обработанных данных пользователя на сервер
     */
    void send_command();
    /*!
     * @private Метод отправки данных на сервер
     * @param msg - массив данных отправляемых на сервер
     * @return true - данные отправленны успешно, иначе false
     * @note осуществляет отправку обработанных данных пользователя на сервер
     */
    bool send_message(const char* msg);
    /*!
     * @private Метод обработки ответа от сервера
     * @param bytesRecv - количество полученных байт от сервера (out)
     * @param answer - массив данных, содержащий ответ от сервера (out)
     * @return true - данные получены успешно, инче false
     * @note осуществляет обработку полученного ответа сервера
     */
    bool get_answer(int& bytesRecv, char* answer);
    /*!
     * @private Метод осуществляющий контроль ввода ответа пользователя на булевый вопрос
     * @param answer - ответ пользователя на вопрос [Y,N]
     * @return None
     * @note организовывается ввод ответа пользователя и дальнейшая его проверка ответа на корректность
     */
    void answer_control(char* answer);
    /*!
     * @private Метод осуществляющий контроль ввода ip-адреса сервера
     * @param ip - корректно введенный пользователем ip-адрес (out)
     * @return None
     * @note организовывается ввод ip-адреса и дальнейшая его проверка на корректность
     */
    void ipaddres_control(char* ip);
};
#endif /* CLIENT_CLIENT_H */
